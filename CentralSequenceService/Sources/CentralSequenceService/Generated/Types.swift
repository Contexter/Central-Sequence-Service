// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Generate Sequence Number
    ///
    /// Generates a new sequence number for a specified element type, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence`.
    /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)`.
    func generateSequenceNumber(_ input: Operations.generateSequenceNumber.Input) async throws -> Operations.generateSequenceNumber.Output
    /// Reorder Elements
    ///
    /// Reorders elements by updating their sequence numbers, persists the changes to an SQLite database, and synchronizes the changes with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `PUT /sequence/reorder`.
    /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)`.
    func reorderElements(_ input: Operations.reorderElements.Input) async throws -> Operations.reorderElements.Output
    /// Create New Version
    ///
    /// Creates a new version of an element, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence/version`.
    /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)`.
    func createVersion(_ input: Operations.createVersion.Input) async throws -> Operations.createVersion.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Generate Sequence Number
    ///
    /// Generates a new sequence number for a specified element type, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence`.
    /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)`.
    public func generateSequenceNumber(
        headers: Operations.generateSequenceNumber.Input.Headers = .init(),
        body: Operations.generateSequenceNumber.Input.Body
    ) async throws -> Operations.generateSequenceNumber.Output {
        try await generateSequenceNumber(Operations.generateSequenceNumber.Input(
            headers: headers,
            body: body
        ))
    }
    /// Reorder Elements
    ///
    /// Reorders elements by updating their sequence numbers, persists the changes to an SQLite database, and synchronizes the changes with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `PUT /sequence/reorder`.
    /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)`.
    public func reorderElements(
        headers: Operations.reorderElements.Input.Headers = .init(),
        body: Operations.reorderElements.Input.Body
    ) async throws -> Operations.reorderElements.Output {
        try await reorderElements(Operations.reorderElements.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create New Version
    ///
    /// Creates a new version of an element, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence/version`.
    /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)`.
    public func createVersion(
        headers: Operations.createVersion.Input.Headers = .init(),
        body: Operations.createVersion.Input.Body
    ) async throws -> Operations.createVersion.Output {
        try await createVersion(Operations.createVersion.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Production server for Central Sequence Service API
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://centralsequence.fountain.coach",
            variables: []
        )
    }
    /// Staging server
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://staging.centralsequence.fountain.coach",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Schema representing a request to generate a new sequence number
        ///
        /// - Remark: Generated from `#/components/schemas/SequenceRequest`.
        public struct SequenceRequest: Codable, Hashable, Sendable {
            /// Type of the element (e.g., script, section, character, action, spokenWord).
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceRequest/elementType`.
            @frozen public enum elementTypePayload: String, Codable, Hashable, Sendable {
                case script = "script"
                case section = "section"
                case character = "character"
                case action = "action"
                case spokenWord = "spokenWord"
            }
            /// Type of the element (e.g., script, section, character, action, spokenWord).
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceRequest/elementType`.
            public var elementType: Components.Schemas.SequenceRequest.elementTypePayload
            /// Unique identifier of the element.
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceRequest/elementId`.
            public var elementId: Swift.Int
            /// Contextual explanation for generating the sequence number.
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceRequest/comment`.
            public var comment: Swift.String
            /// Creates a new `SequenceRequest`.
            ///
            /// - Parameters:
            ///   - elementType: Type of the element (e.g., script, section, character, action, spokenWord).
            ///   - elementId: Unique identifier of the element.
            ///   - comment: Contextual explanation for generating the sequence number.
            public init(
                elementType: Components.Schemas.SequenceRequest.elementTypePayload,
                elementId: Swift.Int,
                comment: Swift.String
            ) {
                self.elementType = elementType
                self.elementId = elementId
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case elementType
                case elementId
                case comment
            }
        }
        /// Schema representing the response with a generated sequence number
        ///
        /// - Remark: Generated from `#/components/schemas/SequenceResponse`.
        public struct SequenceResponse: Codable, Hashable, Sendable {
            /// The generated sequence number.
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceResponse/sequenceNumber`.
            public var sequenceNumber: Swift.Int?
            /// Contextual explanation generated dynamically by the GPT model, explaining why the sequence number was generated.
            ///
            /// - Remark: Generated from `#/components/schemas/SequenceResponse/comment`.
            public var comment: Swift.String?
            /// Creates a new `SequenceResponse`.
            ///
            /// - Parameters:
            ///   - sequenceNumber: The generated sequence number.
            ///   - comment: Contextual explanation generated dynamically by the GPT model, explaining why the sequence number was generated.
            public init(
                sequenceNumber: Swift.Int? = nil,
                comment: Swift.String? = nil
            ) {
                self.sequenceNumber = sequenceNumber
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case sequenceNumber
                case comment
            }
        }
        /// Schema representing a request to reorder elements
        ///
        /// - Remark: Generated from `#/components/schemas/ReorderRequest`.
        public struct ReorderRequest: Codable, Hashable, Sendable {
            /// Type of elements being reordered.
            ///
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/elementType`.
            @frozen public enum elementTypePayload: String, Codable, Hashable, Sendable {
                case script = "script"
                case section = "section"
                case character = "character"
                case action = "action"
                case spokenWord = "spokenWord"
            }
            /// Type of elements being reordered.
            ///
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/elementType`.
            public var elementType: Components.Schemas.ReorderRequest.elementTypePayload
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/elementsPayload`.
            public struct elementsPayloadPayload: Codable, Hashable, Sendable {
                /// Unique identifier of the element.
                ///
                /// - Remark: Generated from `#/components/schemas/ReorderRequest/elementsPayload/elementId`.
                public var elementId: Swift.Int?
                /// New sequence number for the element.
                ///
                /// - Remark: Generated from `#/components/schemas/ReorderRequest/elementsPayload/newSequence`.
                public var newSequence: Swift.Int?
                /// Creates a new `elementsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - elementId: Unique identifier of the element.
                ///   - newSequence: New sequence number for the element.
                public init(
                    elementId: Swift.Int? = nil,
                    newSequence: Swift.Int? = nil
                ) {
                    self.elementId = elementId
                    self.newSequence = newSequence
                }
                public enum CodingKeys: String, CodingKey {
                    case elementId
                    case newSequence
                }
            }
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/elements`.
            public typealias elementsPayload = [Components.Schemas.ReorderRequest.elementsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/elements`.
            public var elements: Components.Schemas.ReorderRequest.elementsPayload
            /// Contextual explanation for reordering the elements.
            ///
            /// - Remark: Generated from `#/components/schemas/ReorderRequest/comment`.
            public var comment: Swift.String
            /// Creates a new `ReorderRequest`.
            ///
            /// - Parameters:
            ///   - elementType: Type of elements being reordered.
            ///   - elements:
            ///   - comment: Contextual explanation for reordering the elements.
            public init(
                elementType: Components.Schemas.ReorderRequest.elementTypePayload,
                elements: Components.Schemas.ReorderRequest.elementsPayload,
                comment: Swift.String
            ) {
                self.elementType = elementType
                self.elements = elements
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case elementType
                case elements
                case comment
            }
        }
        /// Schema representing the response after reordering elements
        ///
        /// - Remark: Generated from `#/components/schemas/ReorderResponse`.
        public struct ReorderResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReorderResponse/updatedElementsPayload`.
            public struct updatedElementsPayloadPayload: Codable, Hashable, Sendable {
                /// Unique identifier of the element.
                ///
                /// - Remark: Generated from `#/components/schemas/ReorderResponse/updatedElementsPayload/elementId`.
                public var elementId: Swift.Int?
                /// Updated sequence number.
                ///
                /// - Remark: Generated from `#/components/schemas/ReorderResponse/updatedElementsPayload/newSequence`.
                public var newSequence: Swift.Int?
                /// Creates a new `updatedElementsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - elementId: Unique identifier of the element.
                ///   - newSequence: Updated sequence number.
                public init(
                    elementId: Swift.Int? = nil,
                    newSequence: Swift.Int? = nil
                ) {
                    self.elementId = elementId
                    self.newSequence = newSequence
                }
                public enum CodingKeys: String, CodingKey {
                    case elementId
                    case newSequence
                }
            }
            /// - Remark: Generated from `#/components/schemas/ReorderResponse/updatedElements`.
            public typealias updatedElementsPayload = [Components.Schemas.ReorderResponse.updatedElementsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ReorderResponse/updatedElements`.
            public var updatedElements: Components.Schemas.ReorderResponse.updatedElementsPayload?
            /// Contextual explanation generated dynamically by the GPT model, explaining why the elements were reordered.
            ///
            /// - Remark: Generated from `#/components/schemas/ReorderResponse/comment`.
            public var comment: Swift.String?
            /// Creates a new `ReorderResponse`.
            ///
            /// - Parameters:
            ///   - updatedElements:
            ///   - comment: Contextual explanation generated dynamically by the GPT model, explaining why the elements were reordered.
            public init(
                updatedElements: Components.Schemas.ReorderResponse.updatedElementsPayload? = nil,
                comment: Swift.String? = nil
            ) {
                self.updatedElements = updatedElements
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case updatedElements
                case comment
            }
        }
        /// Schema representing a request to create a new version of an element
        ///
        /// - Remark: Generated from `#/components/schemas/VersionRequest`.
        public struct VersionRequest: Codable, Hashable, Sendable {
            /// Type of the element (e.g., script, section, character, action, spokenWord).
            ///
            /// - Remark: Generated from `#/components/schemas/VersionRequest/elementType`.
            @frozen public enum elementTypePayload: String, Codable, Hashable, Sendable {
                case script = "script"
                case section = "section"
                case character = "character"
                case action = "action"
                case spokenWord = "spokenWord"
            }
            /// Type of the element (e.g., script, section, character, action, spokenWord).
            ///
            /// - Remark: Generated from `#/components/schemas/VersionRequest/elementType`.
            public var elementType: Components.Schemas.VersionRequest.elementTypePayload
            /// Unique identifier of the element.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionRequest/elementId`.
            public var elementId: Swift.Int
            /// Data for the new version of the element.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionRequest/newVersionData`.
            public var newVersionData: OpenAPIRuntime.OpenAPIObjectContainer
            /// Contextual explanation for creating the new version.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionRequest/comment`.
            public var comment: Swift.String
            /// Creates a new `VersionRequest`.
            ///
            /// - Parameters:
            ///   - elementType: Type of the element (e.g., script, section, character, action, spokenWord).
            ///   - elementId: Unique identifier of the element.
            ///   - newVersionData: Data for the new version of the element.
            ///   - comment: Contextual explanation for creating the new version.
            public init(
                elementType: Components.Schemas.VersionRequest.elementTypePayload,
                elementId: Swift.Int,
                newVersionData: OpenAPIRuntime.OpenAPIObjectContainer,
                comment: Swift.String
            ) {
                self.elementType = elementType
                self.elementId = elementId
                self.newVersionData = newVersionData
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case elementType
                case elementId
                case newVersionData
                case comment
            }
        }
        /// Schema representing the response with the new version number
        ///
        /// - Remark: Generated from `#/components/schemas/VersionResponse`.
        public struct VersionResponse: Codable, Hashable, Sendable {
            /// The version number of the new version.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionResponse/versionNumber`.
            public var versionNumber: Swift.Int?
            /// Contextual explanation generated dynamically by the GPT model, explaining why the new version was created.
            ///
            /// - Remark: Generated from `#/components/schemas/VersionResponse/comment`.
            public var comment: Swift.String?
            /// Creates a new `VersionResponse`.
            ///
            /// - Parameters:
            ///   - versionNumber: The version number of the new version.
            ///   - comment: Contextual explanation generated dynamically by the GPT model, explaining why the new version was created.
            public init(
                versionNumber: Swift.Int? = nil,
                comment: Swift.String? = nil
            ) {
                self.versionNumber = versionNumber
                self.comment = comment
            }
            public enum CodingKeys: String, CodingKey {
                case versionNumber
                case comment
            }
        }
        /// - Remark: Generated from `#/components/schemas/SuccessResponse`.
        public struct SuccessResponse: Codable, Hashable, Sendable {
            /// Success message.
            ///
            /// - Remark: Generated from `#/components/schemas/SuccessResponse/message`.
            public var message: Swift.String?
            /// Creates a new `SuccessResponse`.
            ///
            /// - Parameters:
            ///   - message: Success message.
            public init(message: Swift.String? = nil) {
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// Application-specific error code.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/errorCode`.
            public var errorCode: Swift.String?
            /// Human-readable error message.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/message`.
            public var message: Swift.String?
            /// Additional information about the error, if available.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/details`.
            public var details: Swift.String?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - errorCode: Application-specific error code.
            ///   - message: Human-readable error message.
            ///   - details: Additional information about the error, if available.
            public init(
                errorCode: Swift.String? = nil,
                message: Swift.String? = nil,
                details: Swift.String? = nil
            ) {
                self.errorCode = errorCode
                self.message = message
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case errorCode
                case message
                case details
            }
        }
        /// - Remark: Generated from `#/components/schemas/TypesenseErrorResponse`.
        public struct TypesenseErrorResponse: Codable, Hashable, Sendable {
            /// Error code related to Typesense synchronization.
            ///
            /// - Remark: Generated from `#/components/schemas/TypesenseErrorResponse/errorCode`.
            public var errorCode: Swift.String?
            /// Number of retry attempts made to synchronize with Typesense.
            ///
            /// - Remark: Generated from `#/components/schemas/TypesenseErrorResponse/retryAttempt`.
            public var retryAttempt: Swift.Int?
            /// Human-readable error message.
            ///
            /// - Remark: Generated from `#/components/schemas/TypesenseErrorResponse/message`.
            public var message: Swift.String?
            /// Additional information about the Typesense error, if available.
            ///
            /// - Remark: Generated from `#/components/schemas/TypesenseErrorResponse/details`.
            public var details: Swift.String?
            /// Creates a new `TypesenseErrorResponse`.
            ///
            /// - Parameters:
            ///   - errorCode: Error code related to Typesense synchronization.
            ///   - retryAttempt: Number of retry attempts made to synchronize with Typesense.
            ///   - message: Human-readable error message.
            ///   - details: Additional information about the Typesense error, if available.
            public init(
                errorCode: Swift.String? = nil,
                retryAttempt: Swift.Int? = nil,
                message: Swift.String? = nil,
                details: Swift.String? = nil
            ) {
                self.errorCode = errorCode
                self.retryAttempt = retryAttempt
                self.message = message
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case errorCode
                case retryAttempt
                case message
                case details
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Generate Sequence Number
    ///
    /// Generates a new sequence number for a specified element type, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence`.
    /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)`.
    public enum generateSequenceNumber {
        public static let id: Swift.String = "generateSequenceNumber"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sequence/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.generateSequenceNumber.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.generateSequenceNumber.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.generateSequenceNumber.Input.Headers
            /// - Remark: Generated from `#/paths/sequence/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SequenceRequest)
            }
            public var body: Operations.generateSequenceNumber.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.generateSequenceNumber.Input.Headers = .init(),
                body: Operations.generateSequenceNumber.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.SequenceResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SequenceResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.generateSequenceNumber.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.generateSequenceNumber.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Sequence number successfully generated and synchronized.
            ///
            /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.generateSequenceNumber.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.generateSequenceNumber.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.generateSequenceNumber.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.generateSequenceNumber.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Invalid request parameters.
            ///
            /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.generateSequenceNumber.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.generateSequenceNumber.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct BadGateway: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/POST/responses/502/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/POST/responses/502/content/application\/json`.
                    case json(Components.Schemas.TypesenseErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TypesenseErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.generateSequenceNumber.Output.BadGateway.Body
                /// Creates a new `BadGateway`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.generateSequenceNumber.Output.BadGateway.Body) {
                    self.body = body
                }
            }
            /// Failed to synchronize with Typesense.
            ///
            /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)/responses/502`.
            ///
            /// HTTP response code: `502 badGateway`.
            case badGateway(Operations.generateSequenceNumber.Output.BadGateway)
            /// The associated value of the enum case if `self` is `.badGateway`.
            ///
            /// - Throws: An error if `self` is not `.badGateway`.
            /// - SeeAlso: `.badGateway`.
            public var badGateway: Operations.generateSequenceNumber.Output.BadGateway {
                get throws {
                    switch self {
                    case let .badGateway(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badGateway",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.generateSequenceNumber.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.generateSequenceNumber.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error.
            ///
            /// - Remark: Generated from `#/paths//sequence/post(generateSequenceNumber)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.generateSequenceNumber.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.generateSequenceNumber.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reorder Elements
    ///
    /// Reorders elements by updating their sequence numbers, persists the changes to an SQLite database, and synchronizes the changes with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `PUT /sequence/reorder`.
    /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)`.
    public enum reorderElements {
        public static let id: Swift.String = "reorderElements"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sequence/reorder/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.reorderElements.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.reorderElements.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.reorderElements.Input.Headers
            /// - Remark: Generated from `#/paths/sequence/reorder/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/reorder/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ReorderRequest)
            }
            public var body: Operations.reorderElements.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.reorderElements.Input.Headers = .init(),
                body: Operations.reorderElements.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ReorderResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ReorderResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.reorderElements.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.reorderElements.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Elements successfully reordered and synchronized.
            ///
            /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.reorderElements.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.reorderElements.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.reorderElements.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.reorderElements.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Invalid request parameters.
            ///
            /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.reorderElements.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.reorderElements.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct BadGateway: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/502/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/502/content/application\/json`.
                    case json(Components.Schemas.TypesenseErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TypesenseErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.reorderElements.Output.BadGateway.Body
                /// Creates a new `BadGateway`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.reorderElements.Output.BadGateway.Body) {
                    self.body = body
                }
            }
            /// Failed to synchronize with Typesense.
            ///
            /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)/responses/502`.
            ///
            /// HTTP response code: `502 badGateway`.
            case badGateway(Operations.reorderElements.Output.BadGateway)
            /// The associated value of the enum case if `self` is `.badGateway`.
            ///
            /// - Throws: An error if `self` is not `.badGateway`.
            /// - SeeAlso: `.badGateway`.
            public var badGateway: Operations.reorderElements.Output.BadGateway {
                get throws {
                    switch self {
                    case let .badGateway(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badGateway",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/reorder/PUT/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.reorderElements.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.reorderElements.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error.
            ///
            /// - Remark: Generated from `#/paths//sequence/reorder/put(reorderElements)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.reorderElements.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.reorderElements.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create New Version
    ///
    /// Creates a new version of an element, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.
    ///
    /// - Remark: HTTP `POST /sequence/version`.
    /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)`.
    public enum createVersion {
        public static let id: Swift.String = "createVersion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sequence/version/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createVersion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createVersion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createVersion.Input.Headers
            /// - Remark: Generated from `#/paths/sequence/version/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/version/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VersionRequest)
            }
            public var body: Operations.createVersion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createVersion.Input.Headers = .init(),
                body: Operations.createVersion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/version/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/version/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.VersionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VersionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createVersion.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createVersion.Output.Created.Body) {
                    self.body = body
                }
            }
            /// New version successfully created and synchronized.
            ///
            /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createVersion.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createVersion.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/version/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/version/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createVersion.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createVersion.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Invalid request parameters.
            ///
            /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createVersion.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createVersion.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct BadGateway: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/version/POST/responses/502/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/version/POST/responses/502/content/application\/json`.
                    case json(Components.Schemas.TypesenseErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TypesenseErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createVersion.Output.BadGateway.Body
                /// Creates a new `BadGateway`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createVersion.Output.BadGateway.Body) {
                    self.body = body
                }
            }
            /// Failed to synchronize with Typesense.
            ///
            /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)/responses/502`.
            ///
            /// HTTP response code: `502 badGateway`.
            case badGateway(Operations.createVersion.Output.BadGateway)
            /// The associated value of the enum case if `self` is `.badGateway`.
            ///
            /// - Throws: An error if `self` is not `.badGateway`.
            /// - SeeAlso: `.badGateway`.
            public var badGateway: Operations.createVersion.Output.BadGateway {
                get throws {
                    switch self {
                    case let .badGateway(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badGateway",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sequence/version/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sequence/version/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createVersion.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createVersion.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error.
            ///
            /// - Remark: Generated from `#/paths//sequence/version/post(createVersion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createVersion.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.createVersion.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
